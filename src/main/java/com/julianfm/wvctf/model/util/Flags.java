package com.julianfm.wvctf.model.util;

import lombok.Getter;

@Getter
public enum Flags {
	flag_l_ca554e12680a79810d41ed0adfe0404ce7c68b0c99065c50472c262c85d853b8("A brute force attack can manifest itself in many different ways, but primarily consists in an attacker configuring predetermined values, making requests to a server using those values, and then analyzing the response. For the sake of efficiency, an attacker may use a dictionary attack (with or without mutations) or a traditional brute-force attack (with given classes of characters e.g.: alphanumerical, special, case (in)sensitive). https://owasp.org/www-community/attacks/Brute_force_attack"),
	flag_l_b287569d94db9e49416b0dec7e591e4b1dfcf3cfa76af5dce9be0356c2fd66a9("Source code intended to be kept server-side can sometimes end up being disclosed to users. Such code may contain sensitive information such as database passwords and secret keys, which may help malicious users formulate attacks against the application. https://portswigger.net/kb/issues/006000b0_source-code-disclosure"),
	flag_sf_27055dd23f7d8f8568cf0083e3b5925f257cfee9d16a5627fe76ddb16b917009("Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. https://owasp.org/www-community/attacks/csrf"),
	flag_sf_472fc248735f41d0f484f1942477304eb85a3bbbb361dc262bc3a3397ae35dca("Broken access controls are a commonly encountered and often critical security vulnerability. Design and management of access controls is a complex and dynamic problem that applies business, organizational, and legal constraints to a technical implementation.  Horizontal access controls are mechanisms that restrict access to resources to the users who are specifically allowed to access those resources. With horizontal access controls, different users have access to a subset of resources of the same type. https://portswigger.net/web-security/access-control."),
	flag_so_8d80dd6e4c4449c0fdbcce2f919a82654b169c5f7351193ccd24d725147fab53("Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation. https://owasp.org/www-community/attacks/Command_Injection."),
	flag_so_a936c7beb36c21bc4e160c0771e296abb4777d0be6603ce739e0e0d494b2e318("A path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations or by using absolute file paths. It should be noted that access to files is limited by system operational access control. https://owasp.org/www-community/attacks/Path_Traversal."),
	flag_di_9db3e2d42abc40b2ac3ae54b7d6e2c528fb22f288402e5d671e6cf8c194413fc("NoSQL database calls are written in the application’s programming language, a custom API call, or formatted according to a common convention (such as XML, JSON, LINQ, etc). Malicious input targeting those specifications may not trigger the primarily application sanitization checks. https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection."),
	flag_di_a6c5023f020fac7b8bb87ae1aad338ea80567057afe1dbf520a294f5cd931334("A SQL injection attack consists of insertion or “injection” of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. https://owasp.org/www-community/attacks/SQL_Injection."),
	flag_xss_f655f2a8f72c55b96e90ea538fa59e9b34e16f1bb7971027e078d045772fee2e("Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Stored attacks are those where the injected script is permanently stored on the target servers, such as in a database, in a message forum, visitor log, comment field, etc. The victim then retrieves the malicious script from the server when it requests the stored information. https://owasp.org/www-community/attacks/xss/"),
	flag_xss_08f0ee3843dd031f48a1fa14045b5faa9c1f38eb21ac941479421da5c99afafa("Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Reflected attacks are those where the injected script is reflected off the web server, such as in an error message, search result, or any other response that includes some or all of the input sent to the server as part of the request. Reflected attacks are delivered to victims via another route, such as in an e-mail message, or on some other website. https://owasp.org/www-community/attacks/xss/"),;
	
	private String description;

	Flags(String description) {
		this.description = description;
	}
	
	
	
}
